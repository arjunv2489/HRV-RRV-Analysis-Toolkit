#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Dec 12, 2019 10:04:29 AM IST  platform: Windows NT

import sys
from PIL import Image, ImageTk
from tkinter import filedialog
from tkinter import Canvas
import mne
import numpy as np
import pandas as pd
from os import listdir
from os.path import isfile, join
from scipy.signal import butter, freqs, filtfilt
import matplotlib.pyplot as plt
from scipy.signal import find_peaks
from matplotlib.figure import Figure
import matplotlib
matplotlib.use("TkAgg")
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import rrvnew_support


def vp_start_rrvprocess(y_peaks, x, y, sig, filename, TProgressbar):
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = RrvTopLevel (root)
    rrvnew_support.init(root, top)
    top.initCall(y_peaks, x, y,sig, filename, TProgressbar)
    top.process_rrv_box()
    root.protocol("WM_DELETE_WINDOW", destroy_RrvTopLevel)
    root.protocol("WM_DELETE_WINDOW",rrvnew_support.destroy_window)
    root.mainloop()

w = None
def create_RrvTopLevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = RrvTopLevel (w)
    rrvnew_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_RrvTopLevel():
    global w, root
    root.destroy()
    w.destroy()


def find_time(sig):
    time = ((sig/256)/60)/60
    # print("Time: ", time , "\nLength: ",sig)
    return ((sig/256)/60)/60

class RrvTopLevel:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("920x800")
        top.minsize(120, 1)
        top.maxsize(1370, 749)
        top.resizable(1, 1)
        top.title("RRV Analysis")
        top.configure(background="#d9d9d9")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.033, rely=0.05, relheight=0.763, relwidth=0.942)

        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")

        self.Canvas1 = tk.Canvas(self.Frame1)
        self.Canvas1.place(relx=0.018, rely=0.033, relheight=0.928
                , relwidth=0.961)
        self.Canvas1.configure(background="#d9d9d9")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(selectforeground="black")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.05, rely=0.875, height=21, width=110)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''IPI (ms)''')

        self.isi = tk.Label(top)
        self.isi.place(relx=0.25, rely=0.875, height=21, width=50)
        self.isi.configure(background="#d9d9d9")
        self.isi.configure(disabledforeground="#a3a3a3")
        self.isi.configure(foreground="#000000")
        self.isi.configure(text='''No Value''')

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.383, rely=0.875, height=21, width=77)
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(text='''BPM''')

        self.rrvpeak = tk.Label(top)
        self.rrvpeak.place(relx=0.533, rely=0.875, height=21, width=34)
        self.rrvpeak.configure(background="#d9d9d9")
        self.rrvpeak.configure(disabledforeground="#a3a3a3")
        self.rrvpeak.configure(foreground="#000000")
        self.rrvpeak.configure(text='''No Value''')

        # self.Label4 = tk.Label(top)
        # self.Label4.place(relx=0.590, rely=0.875, height=21, width=77)
        # self.Label4.configure(background="#d9d9d9")
        # self.Label4.configure(disabledforeground="#a3a3a3")
        # self.Label4.configure(foreground="#000000")
        # self.Label4.configure(text='''BPM in %''')

        # self.rrvpeakper = tk.Label(top)
        # self.rrvpeakper.place(relx=0.733, rely=0.875, height=21, width=34)
        # self.rrvpeakper.configure(background="#d9d9d9")
        # self.rrvpeakper.configure(disabledforeground="#a3a3a3")
        # self.rrvpeakper.configure(foreground="#000000")
        # self.rrvpeakper.configure(text='''No Value''')


    def  initCall(self, y_peaks, x, y, sig, filename, TProgressbar):
        self.y_peaks = y_peaks 
        self.x = x
        self.y =  y
        self.sig = sig
        self.filename = filename
        self.TProgressbar = TProgressbar

    def process_rrv_box(self):
        fs = 256
        peaks = self.x
        n = len(self.sig)
        new_var = len(peaks)
        self.TProgressbar['value'] = 10

        duration_sec = n / fs
        duration_min = duration_sec / 60

        avg = new_var / duration_min
        avg = round(avg)
        new_var = round(new_var, 2)

        inter_peak_interval = []
        inter_peak_interval_index = []

        for i in range(0, len(self.y[peaks]) - 1):
            if(((peaks[i+1]/256)*1000 - (peaks[i]/256)*1000) >= 5000 or ((peaks[i+1]/256)*1000 - (peaks[i]/256)*1000) <= 3000) :
                continue
            inter_peak_interval.append((((peaks[i + 1]/256)*1000 - (peaks[i]/256)*1000)))
            inter_peak_interval_index.append(i)
        ipi_mean = np.array(inter_peak_interval).mean()

        self.isi['text'] = str(round(ipi_mean, 2))

        # inter_peak_interval = []
        # inter_peak_interval_index = []
        # for i in range(0, len(self.y[peaks]) - 1):
        #     inter_peak_interval.append((((peaks[i + 1]/256)*1000 - (peaks[i]/256)*1000) / ((peaks[i]/256) * 1000)) * 100 )
        #     inter_peak_interval_index.append(i)
        # ipi_mean = np.array(inter_peak_interval).mean()

        # self.rrvpeakper['text'] = str(round(ipi_mean, 2))
        self.TProgressbar['value'] = 30

        self.TProgressbar['value'] = 50

        self.rrvpeak['text'] = str(avg)
        self.TProgressbar['value'] = 80

        fig = plt.figure(figsize = (4, 4))
        a = fig.add_subplot(111)
        a.plot(inter_peak_interval_index, inter_peak_interval)

        a.set_title ("Inter peak Interval in ms", fontsize=14)
        a.set_ylabel("Points", fontsize=12)
        a.set_xlabel("Time(ms)", fontsize=12)  

        canvas2 = FigureCanvasTkAgg(fig, master=self.Canvas1)
        canvas2.draw()  
        canvas2.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand = True)
        self.TProgressbar['value'] = 100
 
        toolbar = NavigationToolbar2Tk(canvas2, self.Canvas1)
        toolbar.update()
        canvas2.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=True)

        df = pd.DataFrame([])
        data = [[str(self.filename), str(duration_min), str(avg), str(ipi_mean)]]

        df1 = pd.DataFrame(data,columns=['File Name','Duration','Beats per Minute', 'IPI'])
        df = df.append(df1,  ignore_index = True)
        # print(df)
        file = self.filename.split("/")[3]
        file = "Stats_RRV" +file.split('.')[0]+ ".csv"
        df.to_csv( file , encoding='utf-8', index=False)