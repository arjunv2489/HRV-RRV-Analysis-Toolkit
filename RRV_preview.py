#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Dec 14, 2019 09:37:08 AM IST  platform: Windows NT

import sys
from PIL import Image, ImageTk
from tkinter import filedialog
from tkinter import Canvas
import mne
import numpy as np
import pandas as pd
from os import listdir
from os.path import isfile, join
from scipy.signal import butter, freqs, filtfilt
import matplotlib.pyplot as plt
from scipy.signal import find_peaks
from matplotlib.figure import Figure
import matplotlib
matplotlib.use("TkAgg")
from matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg, NavigationToolbar2Tk) 
import configparser


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import RRV_preview_support



def vp_start_rrvpreview(p, v, x, flag):
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    RRV_preview_support.init(root, top)
    if(flag == 1):
        top.rrv_p1(p, v, x)
    elif(flag == 2):
        top.rrv_p2(p, v, x)
    elif(flag == 3):
        top.rrv_p3(p, v, x)
    root.protocol("WM_DELETE_WINDOW", destroy_Toplevel1)
    root.protocol("WM_DELETE_WINDOW", RRV_preview_support.destroy_window)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    RRV_preview_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w, root
    root.destroy()
    w.destroy()
    root = None
    w = None

def find_time(sig):
    time = ((sig/256)/60)/60
    # print("Time: ", time , "\nLength: ",sig)
    return ((sig/256)/60)/60

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("920x800")
        top.minsize(120, 1)
        top.maxsize(1370, 749)
        top.resizable(0, 0)
        top.title("ECG Filtered data preview")
        top.configure(background="#d9d9d9")

        self.Canvas1 = tk.Canvas(top)
        self.Canvas1.place(relx=0.0, rely=0.0, relheight=1.007, relwidth=1.005)
        self.Canvas1.configure(background="#d9d9d9")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(selectforeground="black")


    def rrv_p1(self, p, v, x):
        fig = plt.figure(figsize = (4, 4))
        a = fig.add_subplot(111)
        a.plot(p, 'b-', linewidth = 1)
        a.plot(v, x, "*", color = 'red')

        a.set_title ("Filtered data FLOW channel preview", fontsize=14)
        a.set_ylabel("Unit", fontsize=12)
        a.set_xlabel("Time(s)", fontsize=12)  

        canvas2 = FigureCanvasTkAgg(fig, master=self.Canvas1)
        # self.Canvas1.place(relx=0.047, rely=0.392, relheight=0.368, relwidth=0.408)
        canvas2.draw()  
        canvas2.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand = True)
        toolbar = NavigationToolbar2Tk(canvas2, self.Canvas1)
        toolbar.update()
        canvas2.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=True)

    def rrv_p2(self, p, v, x):
        fig = plt.figure(figsize = (4, 4))
        a = fig.add_subplot(111)
        a.plot(p, 'b-', linewidth = 1)
        a.plot(v, x, "*", color = 'red')

        a.set_title ("Filtered data ABD(Abdomen) Channel preview", fontsize=14)
        a.set_ylabel("Unit", fontsize=12)
        a.set_xlabel("Time(s)", fontsize=12)  

        canvas2 = FigureCanvasTkAgg(fig, master=self.Canvas1)
        # self.Canvas1.place(relx=0.047, rely=0.392, relheight=0.368, relwidth=0.408)
        canvas2.draw()  
        canvas2.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand = True)
 
        toolbar = NavigationToolbar2Tk(canvas2, self.Canvas1)
        toolbar.update()
        canvas2.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=True)

    def rrv_p3(self, p, v, x):
        fig = plt.figure(figsize = (4, 4))
        a = fig.add_subplot(111)
        a.plot(p, 'b-', linewidth = 1)
        a.plot(v, x, "*", color = 'red')

        a.set_title ("Filtered data CHEST channel preview", fontsize=14)
        a.set_ylabel("Unit", fontsize=12)
        a.set_xlabel("Time(s)", fontsize=12)  

        canvas2 = FigureCanvasTkAgg(fig, master=self.Canvas1)
        canvas2.draw()  
        canvas2.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand = True)
 
        toolbar = NavigationToolbar2Tk(canvas2, self.Canvas1)
        toolbar.update()
        canvas2.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=True)




