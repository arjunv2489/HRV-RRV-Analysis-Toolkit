#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Dec 12, 2019 10:21:48 AM IST  platform: Windows NT

import math

import sys
from PIL import Image, ImageTk
from tkinter import filedialog
from tkinter import Canvas
import mne
import numpy as np
import pandas as pd
from os import listdir
from os.path import isfile, join
from scipy.signal import butter, freqs, filtfilt
import matplotlib.pyplot as plt
from scipy.signal import find_peaks
from matplotlib.figure import Figure
import matplotlib
matplotlib.use("TkAgg")
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
# from hrvrrvmain import *
import time
import configparser
import pandas as pd


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import hrv_support

def send_hrv_process(y_peaks, xs, ys, sigs, filenames, Tprogressbars):
    global filename, y_peak, x, y, sig, Tprogressbar
    filename = filenames
    y_peak = y_peaks
    x = xs
    y = ys
    sig = sigs
    Tprogressbar = Tprogressbars
    vp_star_hrv_process()


def vp_star_hrv_process():
    '''Starting point when module is the main routine.'''
    global val, w, root, top
    root = tk.Tk()
    top = HrvTopLevel (root)
    hrv_support.init(root, top)
    top.initCall()
    top.process_hrv_box()
    # root.protocol("WM_DELETE_WINDOW", destroy_root)
    # root.protocol("WM_DELETE_WINDOW", destroy_HrvTopLevel)
    root.protocol("WM_DELETE_WINDOW", hrv_support.destroy_window)
    root.mainloop()

w = None

def destroy_root():
    global root
    root.destroy()

def create_HrvTopLevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = HrvTopLevel (w)
    hrv_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_HrvTopLevel():
    global w, root
    root.destroy()
    w.destroy()


def find_time(sig):
    time = ((sig/256)/60)/60
    # print("Time: ", time , "\nLength: ",sig)
    return ((sig/256)/60)/60

class HrvTopLevel:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("920x800")
        top.minsize(120, 1)
        top.maxsize(1370, 749)
        top.resizable(1, 1)
        top.title("HRV Analysis")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.096, rely=0.627, height=21, width=54)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Filename''')

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.096, rely=0.695, height=21, width=52)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Duration''')

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.382, rely=0.695, height=21, width=31)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''BPM''')

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.707, rely=0.695, height=21, width=38)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''RMSD''')

        self.Label5 = tk.Label(top)
        self.Label5.place(relx=0.096, rely=0.729, height=21, width=34)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(text='''SDSD''')

        self.Label6 = tk.Label(top)
        self.Label6.place(relx=0.382, rely=0.729, height=21, width=38)
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(activeforeground="black")
        self.Label6.configure(background="#d9d9d9")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(highlightbackground="#d9d9d9")
        self.Label6.configure(highlightcolor="black")
        self.Label6.configure(text='''SDNN''')

        self.Label7 = tk.Label(top)
        self.Label7.place(relx=0.268, rely=0.797, height=21, width=124)
        self.Label7.configure(activebackground="#f9f9f9")
        self.Label7.configure(activeforeground="black")
        self.Label7.configure(background="#d9d9d9")
        self.Label7.configure(disabledforeground="#a3a3a3")
        self.Label7.configure(foreground="#000000")
        self.Label7.configure(highlightbackground="#d9d9d9")
        self.Label7.configure(highlightcolor="black")
        self.Label7.configure(text='''Inter Peak Interval Avg''')

        self.Label8 = tk.Label(top)
        self.Label8.place(relx=0.268, rely=0.847, height=21, width=126)
        self.Label8.configure(activebackground="#f9f9f9")
        self.Label8.configure(activeforeground="black")
        self.Label8.configure(background="#d9d9d9")
        self.Label8.configure(disabledforeground="#a3a3a3")
        self.Label8.configure(foreground="#000000")
        self.Label8.configure(highlightbackground="#d9d9d9")
        self.Label8.configure(highlightcolor="black")
        self.Label8.configure(text='''Inter Peak Interval Max''')

        self.Label9 = tk.Label(top)
        self.Label9.place(relx=0.268, rely=0.898, height=21, width=124)
        self.Label9.configure(activebackground="#f9f9f9")
        self.Label9.configure(activeforeground="black")
        self.Label9.configure(background="#d9d9d9")
        self.Label9.configure(disabledforeground="#a3a3a3")
        self.Label9.configure(foreground="#000000")
        self.Label9.configure(highlightbackground="#d9d9d9")
        self.Label9.configure(highlightcolor="black")
        self.Label9.configure(text='''Inter Peak Interval Min''')

        self.Label10 = tk.Label(top)
        self.Label10.place(relx=0.669, rely=0.729, height=21, width=84)
        self.Label10.configure(activebackground="#f9f9f9")
        self.Label10.configure(activeforeground="black")
        self.Label10.configure(background="#d9d9d9")
        self.Label10.configure(disabledforeground="#a3a3a3")
        self.Label10.configure(foreground="#000000")
        self.Label10.configure(highlightbackground="#d9d9d9")
        self.Label10.configure(highlightcolor="black")
        self.Label10.configure(text='''Peak Time Avg''')

        self.fName = tk.Label(top)
        self.fName.place(relx=0.229, rely=0.627, height=21, width=370)
        self.fName.configure(activebackground="#f9f9f9")
        self.fName.configure(activeforeground="black")
        self.fName.configure(background="#d9d9d9")
        self.fName.configure(disabledforeground="#a3a3a3")
        self.fName.configure(foreground="#000000")
        self.fName.configure(highlightbackground="#d9d9d9")
        self.fName.configure(highlightcolor="black")
        self.fName.configure(text='''No Value''')

        self.duration = tk.Label(top)
        self.duration.place(relx=0.229, rely=0.695, height=21, width=34)
        self.duration.configure(activebackground="#f9f9f9")
        self.duration.configure(activeforeground="black")
        self.duration.configure(background="#d9d9d9")
        self.duration.configure(disabledforeground="#a3a3a3")
        self.duration.configure(foreground="#000000")
        self.duration.configure(highlightbackground="#d9d9d9")
        self.duration.configure(highlightcolor="black")
        self.duration.configure(text='''No Value''')

        self.bpm = tk.Label(top)
        self.bpm.place(relx=0.535, rely=0.695, height=21, width=34)
        self.bpm.configure(activebackground="#f9f9f9")
        self.bpm.configure(activeforeground="black")
        self.bpm.configure(background="#d9d9d9")
        self.bpm.configure(disabledforeground="#a3a3a3")
        self.bpm.configure(foreground="#000000")
        self.bpm.configure(highlightbackground="#d9d9d9")
        self.bpm.configure(highlightcolor="black")
        self.bpm.configure(text='''No Value''')

        self.rmsd = tk.Label(top)
        self.rmsd.place(relx=0.86, rely=0.695, height=21, width=34)
        self.rmsd.configure(activebackground="#f9f9f9")
        self.rmsd.configure(activeforeground="black")
        self.rmsd.configure(background="#d9d9d9")
        self.rmsd.configure(disabledforeground="#a3a3a3")
        self.rmsd.configure(foreground="#000000")
        self.rmsd.configure(highlightbackground="#d9d9d9")
        self.rmsd.configure(highlightcolor="black")
        self.rmsd.configure(text='''No Value''')

        self.sdsd = tk.Label(top)
        self.sdsd.place(relx=0.229, rely=0.729, height=21, width=34)
        self.sdsd.configure(activebackground="#f9f9f9")
        self.sdsd.configure(activeforeground="black")
        self.sdsd.configure(background="#d9d9d9")
        self.sdsd.configure(disabledforeground="#a3a3a3")
        self.sdsd.configure(foreground="#000000")
        self.sdsd.configure(highlightbackground="#d9d9d9")
        self.sdsd.configure(highlightcolor="black")
        self.sdsd.configure(text='''No Value''')

        self.sdnn = tk.Label(top)
        self.sdnn.place(relx=0.535, rely=0.729, height=21, width=34)
        self.sdnn.configure(activebackground="#f9f9f9")
        self.sdnn.configure(activeforeground="black")
        self.sdnn.configure(background="#d9d9d9")
        self.sdnn.configure(disabledforeground="#a3a3a3")
        self.sdnn.configure(foreground="#000000")
        self.sdnn.configure(highlightbackground="#d9d9d9")
        self.sdnn.configure(highlightcolor="black")
        self.sdnn.configure(text='''No Value''')

        self.peaktimeavg = tk.Label(top)
        self.peaktimeavg.place(relx=0.86, rely=0.729, height=21, width=34)
        self.peaktimeavg.configure(activebackground="#f9f9f9")
        self.peaktimeavg.configure(activeforeground="black")
        self.peaktimeavg.configure(background="#d9d9d9")
        self.peaktimeavg.configure(disabledforeground="#a3a3a3")
        self.peaktimeavg.configure(foreground="#000000")
        self.peaktimeavg.configure(highlightbackground="#d9d9d9")
        self.peaktimeavg.configure(highlightcolor="black")
        self.peaktimeavg.configure(text='''No Value''')

        self.ipiavg = tk.Label(top)
        self.ipiavg.place(relx=0.631, rely=0.797, height=21, width=40)
        self.ipiavg.configure(activebackground="#f9f9f9")
        self.ipiavg.configure(activeforeground="black")
        self.ipiavg.configure(background="#d9d9d9")
        self.ipiavg.configure(disabledforeground="#a3a3a3")
        self.ipiavg.configure(foreground="#000000")
        self.ipiavg.configure(highlightbackground="#d9d9d9")
        self.ipiavg.configure(highlightcolor="black")
        self.ipiavg.configure(text='''No Value''')

        self.ipimax = tk.Label(top)
        self.ipimax.place(relx=0.631, rely=0.847, height=21, width=40)
        self.ipimax.configure(activebackground="#f9f9f9")
        self.ipimax.configure(activeforeground="black")
        self.ipimax.configure(background="#d9d9d9")
        self.ipimax.configure(disabledforeground="#a3a3a3")
        self.ipimax.configure(foreground="#000000")
        self.ipimax.configure(highlightbackground="#d9d9d9")
        self.ipimax.configure(highlightcolor="black")
        self.ipimax.configure(text='''No Value''')

        self.ipimin = tk.Label(top)
        self.ipimin.place(relx=0.631, rely=0.898, height=21, width=40)
        self.ipimin.configure(activebackground="#f9f9f9")
        self.ipimin.configure(activeforeground="black")
        self.ipimin.configure(background="#d9d9d9")
        self.ipimin.configure(disabledforeground="#a3a3a3")
        self.ipimin.configure(foreground="#000000")
        self.ipimin.configure(highlightbackground="#d9d9d9")
        self.ipimin.configure(highlightcolor="black")
        self.ipimin.configure(text='''No Value''')

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=0.057, rely=0.78, relwidth=0.88)

        self.TSeparator2 = ttk.Separator(top)
        self.TSeparator2.place(relx=0.057, rely=0.966, relwidth=0.88)

        self.TSeparator3 = ttk.Separator(top)
        self.TSeparator3.place(relx=0.057, rely=0.61, relwidth=0.88)

        self.TSeparator4 = ttk.Separator(top)
        self.TSeparator4.place(relx=0.057, rely=0.61, relheight=0.356)
        self.TSeparator4.configure(orient="vertical")

        self.TSeparator5 = ttk.Separator(top)
        self.TSeparator5.place(relx=0.937, rely=0.61, relheight=0.356)
        self.TSeparator5.configure(orient="vertical")

        self.TSeparator6 = ttk.Separator(top)
        self.TSeparator6.place(relx=0.344, rely=0.678, relheight=0.102)
        self.TSeparator6.configure(orient="vertical")

        self.TSeparator6_1 = ttk.Separator(top)
        self.TSeparator6_1.place(relx=0.65, rely=0.678, relheight=0.102)
        self.TSeparator6_1.configure(orient="vertical")

        self.TSeparator7 = ttk.Separator(top)
        self.TSeparator7.place(relx=0.057, rely=0.678, relwidth=0.88)

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.038, rely=0.051, relheight=0.517
                , relwidth=0.927)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")

        self.Canvas1 = tk.Canvas(self.Frame1)
        self.Canvas1.place(relx=0.021, rely=0.033, relheight=0.928
                , relwidth=0.955)
        self.Canvas1.configure(background="#d9d9d9")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(selectforeground="black")

    def  initCall(self):

        # config = configparser.ConfigParser()
        # config.read(filename+'hrv_process.ini')
        # # config.sections()

        # self.y_peaks = int(config['Process configuration']['y_peaks'])
        # self.x = int(config['Process configuration']['x'])
        # self.y =  int(config['Process configuration']['y'])
        # self.sig = int(config['Process configuration']['sig'])
        # self.filename = config['Process configuration']['filename']
        # self.TProgressbar = int(config['Process configuration']['Tprogressbar'])

        self.y_peaks = y_peak
        self.x = x
        self.y =  y
        self.sig = sig
        self.filename = filename
        self.TProgressbar = Tprogressbar

    def process_hrv_box(self):
        peaks = self.x
        beat_count = len(peaks)
        fs = 256
        n = len(self.sig)
        self.TProgressbar['value'] = 0

        duration_sec = n/fs
        duration_min = duration_sec/60
        bpm_avg = beat_count/duration_min
        # self.filestat['text'] = " Loaded: "+ self.filename
        self.fName['text'] = str(self.filename)

        self.TProgressbar['value'] = 20

        inter_peak_interval = []
        interpeakindex = []
        for i in range(0, len(self.y[peaks])-1):
            inter_peak_interval.append(self.y[peaks][i+1] - self.y[peaks][i])
            interpeakindex.append(i)
        ipi_mean = np.array(inter_peak_interval).mean()

        self.TProgressbar['value'] = 40

        peak_time = []
        for i in range(0, len(peaks)):
            peak_time.append(peaks[i]/256)
        pt_mean = np.array(peak_time).mean()

        self.TProgressbar['value'] = 60

        inter_peak_time = []
        inter_peak_time_index = []

        rmsd_sum = 0
        for i in range(0, len(self.y[peaks])-1):
            if(((peaks[i+1]/256)*1000 - (peaks[i]/256)*1000) >= 1250 or ((peaks[i+1]/256)*1000 - (peaks[i]/256)*1000) <= 500) :
                continue
            inter_peak_time.append((peaks[i+1]/256)*1000 - (peaks[i]/256)*1000)
            inter_peak_time_index.append(i)
            rmsd_sum += pow((peaks[i+1]/256)*1000 - (peaks[i]/256)*1000, 2)

        # rr_sqdiff = np.power(inter_peak_time, 2)
        # rmsd = np.sqrt(np.mean(rr_sqdiff))
        rmsd = np.sqrt(rmsd_sum/(len(inter_peak_time)))

        self.TProgressbar['value'] = 80


        ipt_mean = np.array(inter_peak_time).mean()
        ipt_sdnn = np.array(inter_peak_time).std()
        ipt_sdsd = np.array(peak_time).std()
        ipt_max = np.array(inter_peak_time).max()
        ipt_min = np.array(inter_peak_time).min()

        self.duration['text'] = str(round(find_time(len(self.sig)), 2))
        self.bpm['text'] = str(round(bpm_avg))
        self.rmsd['text'] = str(round(math.log(rmsd,2),3))
        # print(rmsd)
        self.sdsd['text'] = str(round(ipt_sdsd))
        self.sdnn['text'] = str(round(ipt_sdnn))
        self.peaktimeavg['text'] = str(round(pt_mean))
        self.ipiavg['text'] = str(round(ipt_mean))
        self.ipimax['text'] = str(round(ipt_max))
        self.ipimin['text'] = str(round(ipt_min))

        fig = plt.figure(figsize = (4, 4))
        a = fig.add_subplot(111)
        a.plot(inter_peak_time_index, inter_peak_time)

        a.set_title ("Inter peak Interval in ms", fontsize=14)
        a.set_ylabel("Unit", fontsize=12)
        a.set_xlabel("Time(s)", fontsize=12)  
        self.TProgressbar['value'] = 100

        canvas2 = FigureCanvasTkAgg(fig, master=self.Canvas1)
        canvas2.draw()  
        canvas2.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand = True)
 
        toolbar = NavigationToolbar2Tk(canvas2, self.Canvas1)
        toolbar.update()
        canvas2.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=True)
        
        # df = pd.DataFrame([])
        # data = [[str(self.filename), str(duration_min), str(round(bpm_avg), str(round(math.log(rmsd,2),3)), str(round(ipt_sdsd)), str(round(ipt_sdnn)), str(round(pt_mean)), str(round(ipt_mean)), str(round(ipt_max)), str(round(ipt_min))]]

        # df1 = pd.DataFrame(data,columns=['File Name','Duration','Beats per Minute','RMSD','SDSD','SDNN','Peak Time Avg', 'IPIAVG', 'IPIMAX', 'IPIMIN'])
        # df = df.append(df1,  ignore_index = True)
        # # print(df)
        # file = self.filename.split("/")[3]
        # file = "Stats_HRV" +file.split('.')[0]+ ".csv"
        # df.to_csv( file , encoding='utf-8', index=False)







